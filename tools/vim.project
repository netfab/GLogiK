GLogiK=$PWD/.. CD=. {
	.gitignore
	AUTHORS
	COPYING
	ChangeLog
	NEWS.md
	README.md
	TODO
	VERSION
	configure.ac
	Makefile.am
	doc=doc/ {
		debian_9.x_stretch
	}
	tools=tools/ {
		Makefile
		do-release.sh
		glogik-daemon.sh
		glogik-client.sh
		GKsLauncher.sh
		GKDBus.sh
	}
	macro=m4/ {
		gdt-flags.m4
	}
	data=data/ {
		applications=applications/ {
			Makefile.am
			GLogiK.desktop
		}
		autostart=autostart/ {
			Makefile.am
			GKsLauncher.desktop
		}
		dbus=dbus/ {
			Makefile.am
			GLogiK.conf.in
		}
		icons=icons/ {
			Makefile.am
		}
		init=init/ {
			openrc=openrc/ {
				Makefile.am
				glogikd.in
			}
			systemd=systemd/ {
			}
		}
		pbm=pbm/ {
			Makefile.am
			fonts=fonts/ {
				monospace85.pbm
				monospace86.pbm
				DejaVuSansBold1616.pbm
			}
			splashscreen=splashscreen/ {
				splashscreen01.pbm
				splashscreen02.pbm
			}
			systemMonitor=systemMonitor/ {
				skeleton.pbm
			}
		}
		tmpfiles.d=tmpfiles.d/ {
			GLogiK.conf.in
		}
		udev=udev/ {
			Makefile.am
			99-GLogiK.rules.in
		}
	}
	src=src/ {
		include=include/ {
			Makefile.am
			device.hpp
			enums.hpp
			keyEvent.hpp
			LCDPluginProperties.hpp
		}
		binaries=bin/ {
			daemon=daemon/ {
				Makefile.am
				LCDPlugins=LCDPlugins/ {
					CPUStats=cpu-stats/ {
						CPUData.cpp
						CPUData.h
						CPUSnapshot.cpp
						CPUSnapshot.h
						LICENSE
						README.md
					}
					NetSnap=netsnap/ {
						netSnapshots.cpp
						netSnapshots.hpp
					}
					endscreen.cpp
					endscreen.hpp
					splashscreen.cpp
					splashscreen.hpp
					systemMonitor.cpp
					systemMonitor.hpp
					LCDPlugin.cpp
					LCDPlugin.hpp
					fonts.hpp
					fontsManager.cpp
					fontsManager.hpp
					PBMFile.cpp
					PBMFile.hpp
					PBMFont.cpp
					PBMFont.hpp
					PBM.hpp
				}
				main.cpp
				client.cpp
				client.hpp
				clientsManager.cpp
				clientsManager.hpp
				clientsSignals.cpp
				clientsSignals.hpp
				daemon.cpp
				daemon.hpp
				daemonControl.cpp
				daemonControl.hpp
				devicesManager.cpp
				devicesManager.hpp
				USBAPIenums.hpp
				keyboardDriver.cpp
				keyboardDriver.hpp
				LCDScreenPluginsManager.cpp
				LCDScreenPluginsManager.hpp
				usbinit.cpp
				usbinit.hpp
				hidapi.cpp
				hidapi.hpp
				libusb.cpp
				libusb.hpp
				logitechG510.cpp
				logitechG510.hpp
				macrosManager.cpp
				macrosManager.hpp
				USBDevice.cpp
				USBDevice.hpp
				USBDeviceID.cpp
				USBDeviceID.hpp
				virtualKeyboard.cpp
				virtualKeyboard.hpp
			}
			launcher=launcher/ {
				Makefile.am
				main.cpp
				DBusHandler.cpp
				DBusHandler.hpp
				launcher.cpp
				launcher.hpp
			}
			gui=gui/ {
				qt=Qt/ {
					Makefile.am
					AboutDialog.cpp
					AboutDialog.hpp
					Tab.cpp
					Tab.hpp
					DaemonAndServiceTab.cpp
					DaemonAndServiceTab.hpp
					DeviceControlTab.cpp
					DeviceControlTab.hpp
					BacklightColorTab.cpp
					BacklightColorTab.hpp
					LCDPluginsTab.cpp
					LCDPluginsTab.hpp
					mainWindow.cpp
					mainWindow.hpp
					main.cpp
				}
			}
			service=service/ {
				Makefile.am
				main.cpp
				devicesHandler.cpp
				devicesHandler.hpp
				DBusHandler.cpp
				DBusHandler.hpp
				service.cpp
				service.hpp
			}
		}
		libraries=lib/ {
			GKDBus=dbus/ {
				Makefile.am
				arguments=arguments/ {
					GKDBusArgument.cpp
					GKDBusArgument.hpp
					GKDBusArgString.cpp
					GKDBusArgString.hpp
					GKDBusArgBoolean.cpp
					GKDBusArgBoolean.hpp
					GKDBusArgByte.cpp
					GKDBusArgByte.hpp
					GKDBusArgUInt16.cpp
					GKDBusArgUInt16.hpp
					GKDBusArgUInt64.cpp
					GKDBusArgUInt64.hpp
					GKDBusArgMacro.cpp
					GKDBusArgMacro.hpp
					GKDBusArgMacrosBank.cpp
					GKDBusArgMacrosBank.hpp
					GKDBusArgDevicesMap.cpp
					GKDBusArgDevicesMap.hpp
					GKDBusArgLCDPluginsArray.cpp
					GKDBusArgLCDPluginsArray.hpp
				}
				events=events/ {
					GKDBusEvent.cpp
					GKDBusEvent.hpp
					GKDBusEventTemplates.cpp
					GKDBusEventTemplates.hpp
				}
				messages=messages/ {
					GKDBusMessage.cpp
					GKDBusMessage.hpp
					GKDBusReply.cpp
					GKDBusReply.hpp
					GKDBusErrorReply.cpp
					GKDBusErrorReply.hpp
					GKDBusRemoteMethodCall.cpp
					GKDBusRemoteMethodCall.hpp
					GKDBusBroadcastSignal.cpp
					GKDBusBroadcastSignal.hpp
					GKDBusAsyncContainer.cpp
					GKDBusAsyncContainer.hpp
				}
				GKDBus.cpp
				GKDBus.hpp
				GKDBusConnection.hpp
				GKDBusEvents.cpp
				GKDBusEvents.hpp
			}
			GKShared=shared/ {
				Makefile.am
				deviceProperties.cpp
				deviceProperties.hpp
				deviceConfigurationFile.cpp
				deviceConfigurationFile.hpp
				glogik.cpp
				glogik.hpp
				macrosBanks.cpp
				macrosBanks.hpp
				sessionManager.cpp
				sessionManager.hpp
			}
			GKUtils=utils/ {
				Makefile.am
				filesystem.cpp
				filesystem.hpp
				FSNotify.cpp
				FSNotify.hpp
				functions.cpp
				functions.hpp
				exception.cpp
				exception.hpp
				GKLogging.cpp
				GKLogging.hpp
				randomGenerator.cpp
				randomGenerator.hpp
				utils.hpp
				XDGUserDirs.cpp
				XDGUserDirs.hpp
			}
		}
	}
}

